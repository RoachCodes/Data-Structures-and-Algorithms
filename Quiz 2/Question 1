#include <iostream>

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

bool hasCycle(ListNode *head) {
    if (head == nullptr || head->next == nullptr) {
        return false; // No cycle if list is empty or has only one node
    }
    
    ListNode *slow = head;
    ListNode *fast = head->next;
    
    while (fast != nullptr && fast->next != nullptr) {
        if (slow == fast) {
            return true; // Cycle detected
        }
        slow = slow->next;
        fast = fast->next->next;
    }
    
    return false; // No cycle found
}

int main() {
    // Example usage
    ListNode *head1 = new ListNode(3);
    head1->next = new ListNode(2);
    head1->next->next = new ListNode(0);
    head1->next->next->next = new ListNode(-4);
    head1->next->next->next->next = head1->next; // Cycle created
    
    std::cout << "Example 1: " << (hasCycle(head1) ? "true" : "false") << std::endl;
    
    ListNode *head2 = new ListNode(1);
    head2->next = new ListNode(2);
    head2->next->next = head2; // Cycle created
    
    std::cout << "Example 2: " << (hasCycle(head2) ? "true" : "false") << std::endl;
    
    ListNode *head3 = new ListNode(1); // No cycle
    
    std::cout << "Example 3: " << (hasCycle(head3) ? "true" : "false") << std::endl;
    
    return 0;
}
